AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'This template deploys a CodePipeline with its required resources.

  The following stages are predefined in this template: - Source - UpdatePipeline
  - UnitTests - BuildAndPackage (MainGitBranch only) - DeployTest (MainGitBranch only)
  - IntegrationTests - DeployProd (MainGitBranch only)

  **WARNING** You will be billed for the AWS resources used if you create a stack
  from this template.

  '
Metadata:
  cfn-lint:
    config:
      ignore_checks:
      - I3011
      - I3013
Parameters:
  ProjectSubfolder:
    Type: String
    Default: /
  ResourceNamePrefix:
    Description: Please specify the prefix for all the resources
    Type: String
    Default: frankcad
  CodeCommitRepositoryName:
    Type: String
    Default: frankcad
  MainGitBranch:
    Type: String
    Default: main
  MonorepoSsmPrefix:
    Type: String
    Default: Monorepo
  CodeBuildImage:
    Type: String
    Default: aws/codebuild/amazonlinux2-x86_64-standard:5.0
  TestConfigEnvName:
    Type: String
    Default: '2'
  TestingPipelineExecutionRole:
    Type: String
    Default: arn:aws:iam::992382578667:role/aws-sam-cli-managed-dev-pipel-PipelineExecutionRole-NXEkqDW8NInf
  TestingCloudFormationExecutionRole:
    Type: String
    Default: arn:aws:iam::992382578667:role/aws-sam-cli-managed-dev-p-CloudFormationExecutionRo-5e7LmyW40wol
  ProdConfigEnvName:
    Type: String
    Default: '1'
  ProdPipelineExecutionRole:
    Type: String
    Default: arn:aws:iam::992382578667:role/aws-sam-cli-managed-prod-pipe-PipelineExecutionRole-xq5sSlVAHFAi
  ProdCloudFormationExecutionExeRole:
    Type: String
    Default: arn:aws:iam::992382578667:role/aws-sam-cli-managed-prod--CloudFormationExecutionRo-n2aZj1RC6Cc8
  GithubOwner:
    AllowedPattern: .+
    Type: String
    Description: Github repo owner
    Default: frankruszel
  AppRepositoryName:
    Description: Name of the Github Repository
    Type: String
    Default: lostNFoundCADASN
  GithubBranch:
    AllowedPattern: .+
    Type: String
    Description: Github branch name e.g. development
    Default: main
Resources:
  GithubConnection:
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ConnectionName:
        Fn::Sub: ${ResourceNamePrefix}-GithubConnection
      ProviderType: GitHub
  Pipeline:
    DependsOn: GithubConnection
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location:
          Ref: PipelineArtifactsBucket
        Type: S3
      RoleArn:
        Fn::GetAtt:
        - CodePipelineExecutionRole
        - Arn
      RestartExecutionOnUpdate: false
      Stages:
      - Name: Source
        Actions:
        - ActionTypeId:
            Category: Source
            Owner: AWS
            Provider: CodeStarSourceConnection
            Version: '1'
          Configuration:
            ConnectionArn:
              Ref: GithubConnection
            FullRepositoryId:
              Fn::Sub: ${GithubOwner}/${AppRepositoryName}
            BranchName:
              Ref: GithubBranch
          Name: Source-Action
          OutputArtifacts:
          - Name: SourceCodeAsZip
          RunOrder: 1
      - Name: UpdatePipeline
        Actions:
        - Name: CreateChangeSet
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: '1'
          Configuration:
            ActionMode: CHANGE_SET_REPLACE
            RoleArn:
              Fn::GetAtt:
              - PipelineStackCloudFormationExecutionRole
              - Arn
            StackName:
              Ref: AWS::StackName
            ChangeSetName:
              Fn::Sub: ${AWS::StackName}-ChangeSet
            TemplatePath:
              Fn::Sub: SourceCodeAsZip::${ProjectSubfolder}/codepipeline.yaml
            Capabilities: CAPABILITY_NAMED_IAM
          InputArtifacts:
          - Name: SourceCodeAsZip
          RunOrder: 1
        - Name: ExecuteChangeSet
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: '1'
          Configuration:
            ActionMode: CHANGE_SET_EXECUTE
            RoleArn:
              Fn::GetAtt:
              - PipelineStackCloudFormationExecutionRole
              - Arn
            StackName:
              Ref: AWS::StackName
            ChangeSetName:
              Fn::Sub: ${AWS::StackName}-ChangeSet
          OutputArtifacts:
          - Name:
              Fn::Sub: ${AWS::StackName}ChangeSet
          RunOrder: 2
      - Name: UnitTest
        Actions:
        - Name: UnitTest
          ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: '1'
          Configuration:
            ProjectName:
              Ref: CodeBuildProjectUnitTest
          InputArtifacts:
          - Name: SourceCodeAsZip
      - Name: BuildAndPackage
        Actions:
        - Name: CodeBuild
          ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: '1'
          Configuration:
            ProjectName:
              Ref: CodeBuildProjectBuildAndPackage
          InputArtifacts:
          - Name: SourceCodeAsZip
          OutputArtifacts:
          - Name: BuildArtifactAsZip
      - Name: DeployTest
        Actions:
        - Name: DeployTest
          ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: '1'
          Configuration:
            ProjectName:
              Ref: CodeBuildProjectDeploy
            EnvironmentVariables:
              Fn::Sub: "[\n  {\"name\": \"ENV_CONFIG_NAME\", \"value\": \"${TestConfigEnvName}\"\
                },\n  {\"name\": \"ENV_PIPELINE_EXECUTION_ROLE\", \"value\": \"${TestingPipelineExecutionRole}\"\
                },\n  {\"name\": \"ENV_CLOUDFORMATION_EXECUTION_ROLE\", \"value\"\
                : \"${TestingCloudFormationExecutionRole}\"}\n]\n"
          InputArtifacts:
          - Name: BuildArtifactAsZip
          RunOrder: 1
        - Name: IntegrationTest
          ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: '1'
          Configuration:
            ProjectName:
              Ref: CodeBuildProjectIntegrationTest
            EnvironmentVariables:
              Fn::Sub: "[\n  {\"name\": \"ENV_PIPELINE_EXECUTION_ROLE\", \"value\"\
                : \"${TestingPipelineExecutionRole}\"}\n]\n"
          InputArtifacts:
          - Name: SourceCodeAsZip
          RunOrder: 2
      - Name: DeployProd
        Actions:
        - Name: DeployProd
          ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: '1'
          RunOrder: 2
          Configuration:
            ProjectName:
              Ref: CodeBuildProjectDeploy
            EnvironmentVariables:
              Fn::Sub: "[\n  {\"name\": \"ENV_CONFIG_NAME\", \"value\": \"${ProdConfigEnvName}\"\
                },\n  {\"name\": \"ENV_PIPELINE_EXECUTION_ROLE\", \"value\": \"${ProdPipelineExecutionRole}\"\
                },\n  {\"name\": \"ENV_CLOUDFORMATION_EXECUTION_ROLE\", \"value\"\
                : \"${ProdCloudFormationExecutionExeRole}\"}\n]\n"
          InputArtifacts:
          - Name: BuildArtifactAsZip
  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName:
          Ref: PipelineArtifactsLoggingBucket
        LogFilePrefix: artifacts-logs
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
  PipelineArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: PipelineArtifactsBucket
      PolicyDocument:
        Statement:
        - Effect: Deny
          Action: s3:*
          Principal: '*'
          Resource:
          - Fn::Sub: ${PipelineArtifactsBucket.Arn}/*
          - Fn::GetAtt:
            - PipelineArtifactsBucket
            - Arn
          Condition:
            Bool:
              aws:SecureTransport: false
        - Effect: Allow
          Action: s3:*
          Principal:
            AWS:
            - Fn::GetAtt:
              - CodePipelineExecutionRole
              - Arn
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${PipelineArtifactsBucket}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${PipelineArtifactsBucket}/*
  PipelineArtifactsLoggingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      OwnershipControls:
        Rules:
        - ObjectOwnership: ObjectWriter
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
  PipelineArtifactsLoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: PipelineArtifactsLoggingBucket
      PolicyDocument:
        Statement:
        - Effect: Deny
          Action: s3:*
          Principal: '*'
          Resource:
          - Fn::Sub: ${PipelineArtifactsLoggingBucket.Arn}/*
          - Fn::GetAtt:
            - PipelineArtifactsLoggingBucket
            - Arn
          Condition:
            Bool:
              aws:SecureTransport: false
  CodePipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - codepipeline.amazonaws.com
      Policies:
      - PolicyName: CodePipelineAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - iam:PassRole
            Resource: '*'
      - PolicyName: GithubConnectionAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - codestar-connections:UseConnection
            Resource:
            - Ref: GithubConnection
      - PolicyName: CodePipelineCodeAndS3Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetBucketAcl
            - s3:GetBucketLocation
            Resource:
            - Fn::GetAtt:
              - PipelineArtifactsBucket
              - Arn
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:PutObject
            Resource:
              Fn::Sub: ${PipelineArtifactsBucket.Arn}/*
      - PolicyName: CodePipelineCodeBuildAndCloudformationAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - codebuild:StartBuild
            - codebuild:BatchGetBuilds
            Resource:
            - Fn::GetAtt:
              - CodeBuildProjectBuildAndPackage
              - Arn
            - Fn::GetAtt:
              - CodeBuildProjectUnitTest
              - Arn
            - Fn::GetAtt:
              - CodeBuildProjectIntegrationTest
              - Arn
            - Fn::GetAtt:
              - CodeBuildProjectDeploy
              - Arn
          - Effect: Allow
            Action:
            - cloudformation:CreateStack
            - cloudformation:DescribeStacks
            - cloudformation:DeleteStack
            - cloudformation:UpdateStack
            - cloudformation:CreateChangeSet
            - cloudformation:ExecuteChangeSet
            - cloudformation:DeleteChangeSet
            - cloudformation:DescribeChangeSet
            - cloudformation:SetStackPolicy
            - cloudformation:SetStackPolicy
            - cloudformation:ValidateTemplate
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
  PipelineStackCloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: cloudformation.amazonaws.com
      Policies:
      - PolicyName: GrantCloudFormationFullAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
      - Key: Role
        Value: aws-sam-pipeline-codebuild-service-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service:
            - codebuild.amazonaws.com
      Policies:
      - PolicyName: CodeBuildLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
      - PolicyName: CodeBuildArtifactsBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:PutObject
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:s3:::${PipelineArtifactsBucket}/*
      - PolicyName: AssumeStagePipExecutionRoles
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Resource: '*'
            Condition:
              StringEquals:
                aws:ResourceTag/Role: pipeline-execution-role
  CodeBuildProjectUnitTest:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image:
          Ref: CodeBuildImage
        EnvironmentVariables:
        - Name: PROJECT_SUBFOLDER
          Value:
            Ref: ProjectSubfolder
      ServiceRole:
        Fn::GetAtt:
        - CodeBuildServiceRole
        - Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec:
          Fn::Sub: ${ProjectSubfolder}/pipeline/buildspec_unit_test.yml
  CodeBuildProjectBuildAndPackage:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image:
          Ref: CodeBuildImage
        PrivilegedMode: true
        EnvironmentVariables:
        - Name: PROJECT_SUBFOLDER
          Value:
            Ref: ProjectSubfolder
        - Name: TESTING_PIPELINE_EXECUTION_ROLE
          Value:
            Ref: TestingPipelineExecutionRole
        - Name: TESTING_ENV_CONFIG_NAME
          Value:
            Ref: TestConfigEnvName
        - Name: PROD_PIPELINE_EXECUTION_ROLE
          Value:
            Ref: ProdPipelineExecutionRole
        - Name: PROD_ENV_CONFIG_NAME
          Value:
            Ref: ProdConfigEnvName
      ServiceRole:
        Fn::GetAtt:
        - CodeBuildServiceRole
        - Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec:
          Fn::Sub: ${ProjectSubfolder}/pipeline/buildspec_build_package.yml
  CodeBuildProjectIntegrationTest:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image:
          Ref: CodeBuildImage
        EnvironmentVariables:
        - Name: PROJECT_SUBFOLDER
          Value:
            Ref: ProjectSubfolder
      ServiceRole:
        Fn::GetAtt:
        - CodeBuildServiceRole
        - Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec:
          Fn::Sub: ${ProjectSubfolder}/pipeline/buildspec_integration_test.yml
  CodeBuildProjectDeploy:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image:
          Ref: CodeBuildImage
        EnvironmentVariables:
        - Name: PROJECT_SUBFOLDER
          Value:
            Ref: ProjectSubfolder
      ServiceRole:
        Fn::GetAtt:
        - CodeBuildServiceRole
        - Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec:
          Fn::Sub: ${ProjectSubfolder}/pipeline/buildspec_deploy.yml
  MonorepoTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: "import os, boto3\nfrom aws_lambda_powertools.logging import Logger\n\
        from aws_lambda_powertools.utilities import parameters\nlogger = Logger()\n\
        cc = boto3.client('codecommit')\ncp = boto3.client('codepipeline')\nssm =\
        \ boto3.client('ssm')\nssm_prefix = os.environ.get('SSM_PREFIX', '')\napp_dir\
        \ = os.environ.get('APP_DIR_IN_MONOREPO')\npipeline_name = os.environ.get('PIPELINE_NAME')\n\
        @logger.inject_lambda_context\ndef lambda_handler(event, _):\n    commit_id\
        \ = event['detail']['commitId']\n    branch_name = event['detail']['referenceName']\n\
        \    repository = event['detail']['repositoryName']\n    paths = get_modified_files_since_last_run(repository,\
        \ commit_id, branch_name)\n    toplevel_dirs = get_unique_toplevel_dirs(paths)\n\
        \    logger.info({'paths': paths, 'toplevel_dirs': toplevel_dirs, 'pipeline_name':\
        \ pipeline_name})\n    if app_dir in toplevel_dirs:\n      start_codepipeline(pipeline_name)\n\
        \    else:\n      logger.info('Not triggering Pipeline %s. No changes under\
        \ App dir %s', pipeline_name, app_dir)\n    update_last_commit(repository,\
        \ commit_id, branch_name)\ndef get_unique_toplevel_dirs(modified_files):\n\
        \    toplevel_dirs = set(filter(lambda a: len(a) > 1, [file.split('/')[0]\
        \ for file in modified_files]))\n    logger.info('toplevel dirs: %s', toplevel_dirs)\n\
        \    return list(toplevel_dirs)\ndef start_codepipeline(codepipeline_name):\n\
        \    try:\n        cp.start_pipeline_execution(name=codepipeline_name)\n \
        \       logger.info(f'Started CodePipeline {codepipeline_name}.')\n    except\
        \ cp.exceptions.PipelineNotFoundException:\n        logger.info(f'Could not\
        \ find CodePipeline {codepipeline_name}.')\n        return False\n    return\
        \ True\ndef param_name_last_commit(repository, branch_name):\n    return os.path.join('/',\
        \ ssm_prefix, repository, branch_name, app_dir, 'LastCommit')\ndef get_last_commit(repository,\
        \ commit_id, branch_name):\n    param_name = param_name_last_commit(repository,\
        \ branch_name)\n    try:\n        return parameters.get_parameter(param_name,\
        \ force_fetch=True)\n    except parameters.GetParameterError:\n        logger.info('not\
        \ found ssm parameter %s', param_name)\n        commit = cc.get_commit(repositoryName=repository,\
        \ commitId=commit_id)['commit']\n        parent = commit['parents'][0] if\
        \ commit['parents'] else None\n        return parent\ndef update_last_commit(repository,\
        \ commit_id, branch_name):\n    ssm.put_parameter(Name=param_name_last_commit(repository,\
        \ branch_name),\n                        Description='Keep track of the last\
        \ commit already triggered',\n                        Value=commit_id, Type='String',\
        \ Overwrite=True)\ndef get_modified_files_since_last_run(repo_name, base_commit,\
        \ branch_name):\n    last_commit = get_last_commit(repo_name, base_commit,\
        \ branch_name)\n    diff = cc.get_differences(repositoryName=repo_name,\n\
        \                                beforeCommitSpecifier=last_commit,\n    \
        \                            afterCommitSpecifier=base_commit\n          \
        \                  ).get('differences', None)\n    logger.info(f\"last_commit:\
        \ '{last_commit}' - base_commit: '{base_commit}'\")\n    logger.info(f\"diff:\
        \ {diff}\")\n    before_blob_paths = {d.get('beforeBlob', {}).get('path')\
        \ for d in diff}\n    after_blob_paths = {d.get('afterBlob', {}).get('path')\
        \ for d in diff}\n    all_modifications = before_blob_paths.union(after_blob_paths)\n\
        \    return list(filter(lambda f: f is not None, all_modifications))\n"
      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 30
      Layers:
      - Fn::Sub: arn:${AWS::Partition}:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPython:22
      Architectures:
      - x86_64
      Environment:
        Variables:
          SSM_PREFIX:
            Ref: MonorepoSsmPrefix
          PIPELINE_NAME:
            Ref: Pipeline
          APP_DIR_IN_MONOREPO:
            Ref: ProjectSubfolder
      Policies:
      - CodeCommitReadPolicy:
          RepositoryName:
            Ref: CodeCommitRepositoryName
      - SSMParameterReadPolicy:
          ParameterName:
            Fn::Sub: ${MonorepoSsmPrefix}/*
      - Statement:
        - Effect: Allow
          Action: ssm:PutParameter
          Resource:
            Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${MonorepoSsmPrefix}/*
      - Statement:
        - Effect: Allow
          Action: codepipeline:StartPipelineExecution
          Resource:
            Fn::Sub: arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:*
      Events:
        EBRule:
          Type: EventBridgeRule
          Properties:
            DeadLetterConfig:
              Type: SQS
            Pattern:
              source:
              - aws.codecommit
              detail-type:
              - CodeCommit Repository State Change
              resources:
              - Fn::Sub: arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepositoryName}
              detail:
                event:
                - referenceCreated
                - referenceUpdated
                referenceType:
                - branch
                referenceName:
                - Ref: MainGitBranch
Outputs:
  CodePipelineUrl:
    Value:
      Fn::Sub: https://${AWS::Region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${Pipeline}/view?region=${AWS::Region}
  CodePipelineExecutionRoleArn:
    Value:
      Fn::GetAtt:
      - CodePipelineExecutionRole
      - Arn
  CodeBuildServiceRoleArn:
    Value:
      Fn::GetAtt:
      - CodeBuildServiceRole
      - Arn
  PipelineArtifactsBucketName:
    Value:
      Ref: PipelineArtifactsBucket
  PipelineArtifactsLoggingBucketName:
    Value:
      Ref: PipelineArtifactsLoggingBucket
